using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using ProjectPRN.Models;
using System.Windows;

namespace ProjectPRN.Business
{
    public class AccountBusiness
    {
        private readonly MilkTeaContext _context;

        public AccountBusiness()
        {
            _context = MilkTeaContext.Ins; // Using the singleton instance from your context
        }

        public List<Account> GetAccount(string username, string password)
        {
            try
            {
                return _context.Accounts
                    .Where(a => a.Username == username && a.Password == password)
                    .Select(a => new Account
                    {
                        AccountId = a.AccountId,  // Changed from userId to match context
                        Username = a.Username,    // Changed property names to match context
                        Password = a.Password,
                        RoleId = a.RoleId,
                        FullName = a.FullName,    // Added additional properties from context
                        Phone = a.Phone
                    })
                    .ToList();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public List<Account> GetAccounts()
        {
            try
            {
                return _context.Accounts
                    .Select(a => new Account
                    {
                        AccountId = a.AccountId,
                        Username = a.Username,
                        Password = a.Password,
                        RoleId = a.RoleId,
                        FullName = a.FullName,
                        Phone = a.Phone
                    })
                    .ToList();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public void InsertAccount(Account account)
        {
            try
            {
                var newAccount = new Account
                {
                    Username = account.Username,
                    Password = account.Password,
                    RoleId = account.RoleId,
                    FullName = account.FullName,
                    Phone = account.Phone
                    // AccountId will be auto-generated by the database
                };

                _context.Accounts.Add(newAccount);
                _context.SaveChanges();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public void DeleteAccount(Account account)
        {
            try
            {
                var accountToDelete = _context.Accounts
                    .FirstOrDefault(a => a.AccountId == account.AccountId);

                if (accountToDelete != null)
                {
                    _context.Accounts.Remove(accountToDelete);
                    _context.SaveChanges();
                    MessageBox.Show("The data has been deleted");
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public void UpdateAccount(Account account)
        {
            try
            {
                var accountToUpdate = _context.Accounts
                    .FirstOrDefault(a => a.AccountId == account.AccountId);

                if (accountToUpdate != null)
                {
                    accountToUpdate.Username = account.Username;
                    accountToUpdate.Password = account.Password;
                    accountToUpdate.RoleId = account.RoleId;
                    accountToUpdate.FullName = account.FullName;
                    accountToUpdate.Phone = account.Phone;

                    _context.SaveChanges();
                    MessageBox.Show("Data has been updated!");
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }
    }
}